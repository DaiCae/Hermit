#include <stdio.h>
#include <math.h>
#define N1 10
//int get_CandS(double shuzu[N1][N1],N1,double CandS_shuzu[N1]);
//int build_Gshuzu(int i,int j,double *G_shuzu,N1,CandS_shuzu[c],CandS_shuzu[s]);
int main()
{
    int i, j, c, s, a;
    // double shuzu[N1][N1],
    double CandS_shuzu[2 * (N1 - 1)], G_shuzu[N1][N1];

    double shuzu[N1][N1] = {
        {1.000000, 7.615773, -0.000000, 0.000000, -0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000},
        {7.615773, 11.086207, -5.764889, 0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000},
        {-0.000000, -5.764889, -1.704799, -1.954704, -0.000000, 0.000000, -0.000000, -0.000000, 0.000000, 0.000000},
        {0.000000, -0.000000, -1.954704, 0.945044, -2.206045, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000},
        {-0.000000, 0.000000, 0.000000, -2.206045, 0.673548, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000},
        {0.000000, 0.000000, -0.000000, -0.000000, -0.000000, 16.699487, -0.320229, 0.000000, -0.000000, -0.000000},
        {-0.000000, 0.000000, 0.000000, -0.000000, -0.000000, -0.320229, -1.937164, -3.698816, -0.000000, 0.000000},
        {0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -3.698816, -1.014432, -2.824432, -0.000000},
        {0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, -0.000000, -2.824432, -1.221666, 0.872958},
        {-0.000000, -0.000000, 0.000000, -0.000000, 0.000000, -0.000000, 0.000000, -0.000000, 0.872958, -0.454734}

    };

    // //赋值
    // for (i = 0; i < N1; i++)
    // {
    //     for (j = 0; j < N1; j++)
    //     {
    //         shuzu[i][j] = i * 2.0 + j * 3.0;
    //     }
    // }

    for (i = 0; i < N1 - 1; i++)
    {
        if (shuzu[i][i + 1] == 0)
        {
            CandS_shuzu[i * 2] = 1;
            CandS_shuzu[1 + i * 2] = 0;
        }
        else
        {
            CandS_shuzu[i * 2] = shuzu[i][i] / sqrt(shuzu[i][i] * shuzu[i][i] + shuzu[i][i + 1] * shuzu[i][i + 1]);
            //c值
            CandS_shuzu[1 + i * 2] = shuzu[i][i + 1] / sqrt(shuzu[i][i] * shuzu[i][i] + shuzu[i][i + 1] * shuzu[i][i + 1]);
        };
    } //s值

    //printf("输入行列\n");
    // scanf("%d%d", &c, &s);
    // printf("%d%d", c, s);
    c = 1;
    s = 2;
    for (i = 0; i < N1; i++)
    {
        for (j = 0; j < N1; j++)
        {
            if (i == j)
            {
                if (i == c - 1 || i == s - 1)
                    G_shuzu[i][j] = CandS_shuzu[(c - 1) * 2];
                else
                    G_shuzu[i][j] = 1;
            }
            else
            {
                if (i == s - 1 && j == c - 1 || i == c - 1 && j == s - 1)
                {
                    if (j > i)
                        a = 1;
                    else
                        a = -1;
                    G_shuzu[i][j] = a * CandS_shuzu[1 + (c - 1) * 2];
                    //G_shuzu[c][s]=CandS_shuzu[1+(i-1)*2];
                }
            }
        }
    }

    printf("原矩阵\n");
    for (i = 0; i < N1; i++)
    {
        for (j = 0; j < N1; j++)
        {
            printf("%10lf ", shuzu[i][j]);
        }
        printf("\n");
    }
    printf("矩阵G\n");
    for (i = 0; i < N1; i++)
    {
        for (j = 0; j < N1; j++)
        {
            printf("%10lf  ", G_shuzu[i][j]);
        }
        printf("\n");
    }
    printf("C和S\n");
    for (i = 0; i < N1 - 1; i++)
    {
        for (j = 0; j < 2; j++)
        {
            printf("%10lf  ", CandS_shuzu[i * 2 + j]);
        }
    printf("\n");
    }
    //get_GandS(shuzu,G_shuzu,N1);
    return 0;
}